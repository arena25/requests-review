{"google":"UA-1913538-5","tagline":"A review of Kenneth Reitz's Requests 0.14.0 for DIAGRAM magazine.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"===============\r\nRequests 0.14.0\r\n===============\r\n\r\nby Kenneth Reitz\r\n----------------\r\n\r\nReviewed by William John Bert\r\n\r\nIdentification with another is addictive: some of my life's most profound,\r\nmemorable experiences have come when something has bridged the gap between me\r\nand another human. Because I'm a reader, this can occur across the distance of\r\nspace and time. It's happened with minor Chekov characters, and at the end of\r\nKate Mansfield stories. It happens again and again with Norman Rush and\r\nGeorge Saunders. The author has pushed a character or an emotion through the\r\npage and connected with me on a deep level: identification.\r\n\r\nIdentification happens with computer programming, too.\r\n\r\nI say this as a reader, writer, and programmer: I experience identification when\r\nreading and programming, and I strive to create it when writing and programming.\r\n\r\nThough they deal with the messiness of reality differently, several techniques\r\ncommon to both disciplines enable them to achieve this mental intimacy:\r\nnavigating complexity; avoiding pitfalls that inhibit communication; choosing\r\nstructure wisely; harness expressive power; and inhabiting other minds, The\r\nRequests library, a work of computer programming by Kenneth Reitz, illustrates\r\nthis.\r\n\r\nNavigating Complexity\r\n---------------------\r\n\r\nAs humans, we've evolved to unconsciously filter the staggering possibilities\r\navailable to us at each moment. To manage that complexity, we have rules. Humans\r\ncome with some built in rules (eat when hungry), and easily learn more (don't\r\ntouch hot stoves) and more (don't lie, especially to those you love). When I'm\r\nwriting, my stories might examine how these rules come into conflict with each\r\nother: a government doctor is ordered to a remote, neglected village, and comes\r\nto value its people more than his duty to the government.\r\n\r\nComputers don't come with built-in rules. When I'm programming, if I make a\r\nmistake, the computer faithfully marches into it head-on. Computers do precisely\r\nand only what you tell them (frustrations with Microsoft Word notwithstanding),\r\nand because there are a staggering number of things they can do, programmers\r\nconstantly battle complexity, sometimes spelling out in excruciating detail\r\nexactly what it is we want them to do. Programming is an effort to build up sets\r\nof rules that direct the computer to do something helpful.\r\n\r\nStaggering possibilities managed by rules: that's also a description of natural\r\nlanguage. The difference is, when it comes to natural language, we've had lots\r\nof time to deal with it. Our brains have evolved pockets that just do languagey\r\nstuff. When I write, I benefit from this history.\r\n\r\nWhen it comes to programming, we're just getting started. Our brains need help.\r\n\r\nAvoiding Pitfalls\r\n-----------------\r\n\r\nMisunderstandings and garbled messages kill identification before it can\r\nbegin. Grammar, punctuation, and even typing mistakes fatally divert attention\r\nfrom what the writer is trying to say. Layout and space matter, too: linebreaks\r\nare essential to poetry, and visual flow to longer narrative. Communication can\r\nhappen without them, but immersion comes more easily when nothing gets in the\r\nway.\r\n\r\nThe stuff that programmers write, called code, can likewise be correct or\r\nincorrect, beautiful or ugly. Requests is written in a programming language\r\ncalled Python [#]_ that's known for being easy to read. Unusually for\r\nprogramming languages, Python requires a certain amount of space between bits of\r\ncode, and its style guide encourages using even more space than required. Clear\r\nand consistent names for built-in elements of the language that programmers\r\ncannot change aid comprehension--not the case in every language. Reitz embraces\r\nPython's style.\r\n\r\nStructure\r\n---------\r\n\r\nOptions for structure and sequence abound: writers order narrative\r\nchronologically, *in media res*, or in more complex ways. Chapters can be short,\r\nlong, or omitted. From Volumes and Parts to paragraphs and sentences, structure\r\nmatters.\r\n\r\nRequests's parallel structure is typical of programming libraries: the code\r\nitself, and a document that explains how to use the code. Within the code, there\r\nare structures that are rough analogs of sentences, paragraphs, chapters, and\r\nvolumes, while the documentation is narrative, starting with easy things and\r\nadvancing to difficult material.\r\n\r\nThis bundle of code plus documentation is known as an *application programming\r\ninterface*, or simply *API*.\r\n\r\nAPIs are what make it possible to post your Instagram photos to your Facebook\r\ntimeline, checkin on Foursquare from your iPhone, book a flight on United from\r\nKayak, etc. Without APIs, without a way to share units of functionality with\r\neach other, each programmer or programming team would be on its own. Everything\r\nwould take much, much longer; each programmer would have to reinvent the wheel.\r\n\r\nHere's an interesting bit of jargon: programmers say that somebody is\r\n\"exposing an API.\" It's an act of confidence, but also vulnerability.\r\n\r\nExpressive Power\r\n----------------\r\n\r\nThe number of books to read is huge. Why would you choose one over another?  Why\r\nmight you read a literary novel over, say, a detective novel, or an author you\r\nlove over one you don't? One reason might be that while a thoughtful reader can\r\neke meaning from even the flimsiest of genre novels (sometimes even with great\r\nsatisfaction and enjoyment), we tend to find more significance in novels and\r\npoetry that pack their sentences and stanzas with meaning, allusion, emotion,\r\nand impact. We might call this *expressive power*.\r\n\r\nThe collection of programming libraries is also huge. To show how they vary in\r\nexpressive power, I need to introduce a bit of programming code::\r\n\r\n    >>> import urllib2\r\n    >>> req = urllib2.Request('http://www.goodreads.com')\r\n    >>> response = urllib2.urlopen(req)\r\n    >>> response.read()\r\n\r\nThis snippet [#]_ is the standard way to retrieve a webpage (specifically,\r\nGoodreads' homepage) using a Python library called urllib2. Requests does the\r\nsame thing this way::\r\n\r\n    >>> import requests\r\n    >>> response = requests.get(\"http://www.goodreads.com\")\r\n\r\nRequests' code is two lines instead of four. That might not seem like a big\r\ndifference from urllib2, but note it, and bear with me just a bit longer. Both\r\nthese snippets store the webpage they've retrieved in a variable called\r\n``response``. When I'm programming, I'll want to do something useful with\r\n``response``: save it to a file, show it to a user, parse it to see what books\r\nare popular. If I ask Python to describe the\r\n``response`` returned by urllib2, I get something like [#]_ this::\r\n\r\n    >>> response\r\n    <addinfourl at 4338521656 whose fp = <socket._fileobject object at 0x10297ce50>>\r\n\r\nThe ``response`` that Requests gives me, on the other hand, looks like::\r\n\r\n    >>> response\r\n    <Response [200]>\r\n\r\nAgain, Requests is smaller, and it turns out its two lines of code give me\r\nsomething much more useable than urllib2. ``Response [200]`` is meaningful; one\r\nof the first things every web programmer learns is that, in HTTP, the language\r\nof the internet, 200 means, simply, \"OK\". Requests lets me know my code\r\nsucceeded.\r\n\r\nThe thing that urllib2 gave me, ``<addinfourl at 4338521656 whose fp =\r\n<socket._fileobject object at 0x10297ce50>>``, is clear as mud. I can make some\r\nguesses about it, but to really understand it, I'd have to spend time rooting\r\naround in documentation. I just wanted to get a web page.\r\n\r\nThis difference between the two libraries--their expressive power--plays out\r\nover and over with the rest of their functionality (fetching a webpage is just\r\nscratching the surface).\r\n\r\n``requests.get`` is Hemingway, or Strunk and White. Declarative. Terse. Say what\r\nyou mean as plainly as possible. Behind the scenes, its two lines are doing more\r\nwork than they seem, the way a good writer's sentences accomplish multiple\r\nthings at once: moving plot forward, imparting character, setting tone, painting\r\na scene.\r\n\r\nurllib2's jumble is verbose jargon, like legalese: heretofore, whereas, the\r\nparty of the first part. Its API is a menagerie of abstractions with names\r\nsuch as ``OpenerDirector`` and ``HTTPPasswordMgrWithDefaultRealm`` [#]_ that\r\nhave to be looked up to be understood, and are often underwhelming in their\r\ncapabilities.\r\n\r\nGreater expressive power matches more closely the workings of my mind, where my\r\nthoughts flow in a continuous stream. It's internal. I can't achieve\r\nidentification with a legal briefing. But with a novel or a good API, the pace\r\nof meaning accelerates, syncing with my inner monologue, setting the stage for\r\nidentification.\r\n\r\nDealing with Reality\r\n--------------------\r\n\r\nProgrammers strive to be subtext-free. The code is tricky enough. Miss a comma\r\nor closing brace, and spend hours trying to find your mistake. The computer\r\nforgives nothing. Good programmers deal with this by making reality as clean as\r\npossible.\r\n\r\nFor example, within an app that tracks the books you've read, you've either read\r\na book or not, or perhaps you're currently reading it. There's no \"I read a\r\nthird of it, then put it down for a while,\" or \"I stole it from a friend and\r\nalmost finished it but now Vanessa's borrowing it, I think.\" A system that tried\r\nto encode every possible state of any person's relationship to their books would\r\nnever be finished. This is how programmers deal with reality: by cleaning it up.\r\n\r\nWhat I said above about Requests being like Hemingway isn't entirely accurate:\r\nhis clean prose belies a messy reality that is always present; meaning is often\r\nunstated. Likewise, when Austen begins, \"It is a truth universally acknowledged,\r\nthat a single man in possession of a good fortune must be in want of a wife,\"\r\nshe is not simply stating a universal truth that she has identified. The\r\nsentence comes with subtext: the truth is universal in the minds of some people,\r\nbut not others, an oxymoron, emphasized by the sentence's lack of an active\r\nsubject. There is also commentary on the relative power of men and women in her\r\ntime. Here is a richness that demands and rewards repeated reading, offering\r\ninterpretations as varied as the number of people who read it.\r\n\r\nWhen I write a story, I thrive on subtext, on creating shades of meaning and\r\nmultiple readings. Ambiguity and elision and irony are my techniques for\r\ndealing with the messiness of reality. But when I type:\r\n\r\n.. code-block::\r\n\r\n  import requests, config\r\n  user = config.user\r\n  host = config.host\r\n  url = \"/api/login\"\r\n  data = {\r\n    \"email\": user['email'],\r\n    \"password\": user['password']\r\n  }\r\n  session = requests.Session()\r\n  session.post(host+url, data=data)\r\n\r\nI aim to banish ambiguity. I name my variables clearly, according to what\r\ndata they hold. I structure the code to indicate the flow of execution. Requests\r\nhelps me here: the last two lines that create a new session correspond to how I\r\nintuitively think of creating a session. The equivalent in urllib2 would be\r\nmessier and more verbose.\r\n\r\nI want future readers--myself and others--to understand exactly what that code\r\nis doing. Future readers are as sure a thing with code as with literature. [#]_\r\nI'll be re-reading my code in six months when I add a new feature in another\r\npart of the program and it suddenly breaks something here and I have to figure\r\nout how they are connected.\r\n\r\nWhat it's like to work with a bad API\r\n-------------------------------------\r\n\r\nYou get annoyed. You say of whoever created it, What were they thinking?  You\r\nfeel bogged down. Nothing comes easy. You have to keep taking breaks. You feel\r\nforgetful. You wonder if it's your fault, if you're missing something everyone\r\nelse sees. You get a headache. You curse. You may bite or click your nails, or\r\nmaniacally tap your foot. You want to be doing something else.\r\n\r\nGrok\r\n----\r\n\r\nProgrammers put so much value on understanding something with intimate and\r\nexhaustive knowledge that traditional programmer slang has its own word for it:\r\n*grok* [#]_. It's from the language of the Martians in Robert Heinlein's\r\n*Stranger in a Strange Land*, in which it means literally \"to drink\" and\r\nmetaphorically \"to be one with.\"\r\n\r\nIn a novel or poem, you've been led to understanding and impression by a\r\nsuccession of images and literary devices and experiences and revelations. In\r\nprogramming, you are led to understanding by encountering problems, ways of\r\nthinking about those problems, organizing them, and finally grokking them well\r\nenough to devise a solution.\r\n\r\nReitz groks Python and the internet well, better than I ever will, as Austen\r\ngrokked relationships and power dynamics better than I ever will. Through\r\nexposure to their works, I benefit from their experience of the world. In my own\r\nwork of programming and writing, I strive to match the understanding that they\r\nachieved.\r\n\r\nTheory of Mind\r\n--------------\r\n\r\nWriters and programmers inhabit other minds.\r\n\r\nWriters inhabit the minds of their characters and of readers of their work.\r\n\r\nProgrammers inhabit the minds of users. In Reitz's case, these are other\r\nprogrammers (as opposed to, say, the programmers of Google Chrome, which is used\r\nby non-programmers). Programmers might also be said to inhabit mind of the\r\ncomputer itself.\r\n\r\nThis habitation of minds outside my own is part of what draws me to both these\r\npursuits. It is a challenge. It broadens my world. Thinking of others, as others\r\nthink, anticipating their needs and wants and questions, helps me escape myself\r\nand gain perspective. It's invigorating!\r\n\r\nWhat it's like to work with a great API\r\n---------------------------------------\r\n\r\nIt's more than if Lori Moore or John Ashbery published a notebook of exercises\r\nand prompts; it's as if they published part of their brain, so that you too can\r\nrun your thoughts through it, and have them upgraded. As you figure out how to\r\ndo what you set out to do, you realize other things that would also be cool to\r\ndo, and you find that the API has ways to do them, too! You think the way\r\nsomeone else thought, and understand their thinking on a deep level. You have a\r\nsense that we are all in this together, we're not so different.\r\n\r\nIdentification\r\n--------------\r\n\r\nIdentification is addictive. I seek it out, and I have an urge to spark it in\r\nothers. The difficulties of navigating complexity while avoid communication\r\npitfalls, of harnessing expressive power, and inhabiting other minds, make it\r\ndifficult to find and create. If I can ever achieve it in my own work--whether\r\nwriting or programming--it will be through studying--grokking--works like *Pride\r\nand Prejudice*, and *Requests*.\r\n\r\n\r\nFootnotes\r\n---------\r\n\r\n.. [#] As in Monty Python, not the snake.\r\n\r\n.. [#] What does this all mean?\r\n\r\n   Three greater-than signs (>>>) is called a prompt, as in Python is prompting\r\n   me to give it something to do. The rest of the line after it is what I\r\n   type. So this::\r\n\r\n       >>> requests.get(\"www.goodreads.com\")\r\n       <Result [200]>\r\n\r\n   is really this little dialog:\r\n\r\n   Python: I'm ready! Give me something to do.\r\n\r\n   Me: Retrieve this webpage, www.goodreads.com, for me.\r\n\r\n   Python: OK, did that, here's what I got.\r\n\r\n   Writing out prompt/command/result is a common way for programmers to give\r\n   each other examples: this is what I did; this is what I got; if you do the\r\n   same, you should get the same result.\r\n\r\n.. [#] I say \"something like\" because the exact numbers will vary on different\r\n   computers and at different times of execution.\r\n\r\n.. [#] These names are strikingly similar to the kinds of names that are common\r\n   in another programming language you may have heard of, Java. Why that is is a\r\n   whole other discussion that gets into very different philosophies about\r\n   programming languages.\r\n\r\n.. [#] An experience I've noticed that's common to writers and programmers is\r\n   looking back at their own work and not recognizing it, with reactions ranging\r\n   from admiration (How did I do that?) to disgust (What was I thinking?).\r\n\r\n.. [#] This definition is taken from The Jargon File, a reference of programming\r\n   jargon and lore: http://www.catb.org/jargon/html/G/grok.html\r\n","name":"Review of Requests 0.14.0"}